/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.44
 * Generated at: 2021-06-07 14:43:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.funding;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class fundingStart5_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/common/makerNav.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("title", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("Start5 | IF Maker Studio", request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container p-5\">\r\n");
      out.write("        <div class=\"btn-block progress\">\r\n");
      out.write("            <div class=\"progress-bar bg-info\" role=\"progressbar\" style=\"width: 100%\" aria-valuenow=\"50\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <br>\r\n");
      out.write("        <h1 class=\"display-5 font-weight-bold\">마지막으로 기본 사항을 확인하세요.</h1>\r\n");
      out.write("        <p class=\"lead\">메이커님의 프로젝트를 등록하려면 일정 기준에 부합해야 합니다. 프로젝트를 작성하기 전에 다음 기준을 충족하는지 확인해보세요.</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <br>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-check mb-2\">\r\n");
      out.write("            <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck1\">\r\n");
      out.write("            <label class=\"form-check-label\" for=\"defaultCheck1\">\r\n");
      out.write("                펀딩 진행 중에는 제공할 리워드를 다른 온∙오프라인에서 펀딩하거나 판매하지 않습니다.\r\n");
      out.write("            </label>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-check mb-2\">\r\n");
      out.write("            <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck2\">\r\n");
      out.write("            <label class=\"form-check-label\" for=\"defaultCheck1\">\r\n");
      out.write("                제공할 리워드는 현금, 지분 등의 수익이 아닌 제품 또는 서비스입니다.\r\n");
      out.write("            </label>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-check mb-2\">\r\n");
      out.write("            <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck3\">\r\n");
      out.write("            <label class=\"form-check-label\" for=\"defaultCheck1\">\r\n");
      out.write("                진행할 프로젝트 및 리워드가 제 3자의 지식재산권을 침해하지 않으며, 와디즈가 침해 사실을 인지하는 경우 해당 프로젝트를 중단/취소할 수 있습니다.\r\n");
      out.write("            </label>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-check mb-2\">\r\n");
      out.write("            <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck4\">\r\n");
      out.write("            <label class=\"form-check-label\" for=\"defaultCheck1\">\r\n");
      out.write("                서포터에게 프로젝트 진행 과정을 안내하고, 배송 약속을 지킬 수 있습니다.\r\n");
      out.write("            </label>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-check mb-2\">\r\n");
      out.write("            <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck5\">\r\n");
      out.write("            <label class=\"form-check-label\" for=\"defaultCheck1\">\r\n");
      out.write("                서포터와의 신뢰를 위해 펀딩 진행∙리워드 제작∙배송 등 모든 과정에서 겪는 어려움들을 서포터에게 진솔하게 전달하고 문제를 해결합니다.\r\n");
      out.write("            </label>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"form-check mb-2\">\r\n");
      out.write("            <input class=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck6\">\r\n");
      out.write("            <label class=\"form-check-label\" for=\"defaultCheck1\">\r\n");
      out.write("                리워드의 관계 법령 및 관련 광고 심의 규정을 준수하여 스토리를 작성하겠습니다.\r\n");
      out.write("            </label>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <br>\r\n");
      out.write("\r\n");
      out.write("        <button type=\"button\" class=\"btn btn-secondary btn-lg\"> &lt; 이전 </button> \r\n");
      out.write("        <!-- 다 체크해야 버튼 활성화되게 하기 -->\r\n");
      out.write("        <button class=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\" style=\"width: 200px;\"  onclick=\"location.href='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/funding/ready1Funding';\">시작하기</button>\r\n");
      out.write("      \r\n");
      out.write("\r\n");
      out.write("    </section> \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
