/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.44
 * Generated at: 2021-06-07 12:01:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.funding;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class fundingStart4_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/common/makerNav.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("title", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("Start4 | IF Maker Studio", request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <div class=\"container p-5\">\r\n");
      out.write("          <div class=\"btn-block progress\">\r\n");
      out.write("              <div class=\"progress-bar bg-info\" role=\"progressbar\" style=\"width: 75%\" aria-valuenow=\"75\" aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\r\n");
      out.write("          </div>\r\n");
      out.write("\r\n");
      out.write("          <br>\r\n");
      out.write("          <div class=\"p-3 mb-2 bg-light text-dark\">\r\n");
      out.write("              \r\n");
      out.write("              📣펀딩금 반환 정책 시행 및 정산 정책 변경 안내\r\n");
      out.write("              메이커와 서포터의 신뢰할 수 있는 펀딩을 중개하기 위해 펀딩금 반환 정책이 시행됩니다.\r\n");
      out.write("              \r\n");
      out.write("              펀딩금 반환 정책 시행\r\n");
      out.write("              서포터는 펀딩 종료 후 아래와 같은 경우에 펀딩금 반환을 신청할 수 있습니다.\r\n");
      out.write("              \r\n");
      out.write("              1) 리워드가 발송 시작 예정일까지 발송되지 않은 경우\r\n");
      out.write("              2) 리워드에 하자가 발생한 경우\r\n");
      out.write("              정산 정책 변경\r\n");
      out.write("              정산은 총 2회에 걸쳐 진행되며, 최종 결제 금액에 따라 분할 정산 비율이 결정됩니다.\r\n");
      out.write("              ・ 바로정산(1차): 프로젝트 종료 후\r\n");
      out.write("              ・ 최종정산(2차): 리워드 배송 & 펀딩금 반환 완료 후\r\n");
      out.write("              \r\n");
      out.write("              ※ 자세한 내용은 아래 내용과 정책 변경 공지사항을 참고하세요.\r\n");
      out.write("              \r\n");
      out.write("              \r\n");
      out.write("            </div>\r\n");
      out.write("            <br>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"container\">\r\n");
      out.write("                <h1 class=\"display-5 font-weight-bold\">아래와 같은 프로세스로 진행됩니다.</h1>\r\n");
      out.write("                <p class=\"lead\">아래와 같은 4단계의 진행 과정을 통해 프로젝트가 오픈됩니다. \r\n");
      out.write("                    투명하고 신뢰도 있는 프로젝트를 오픈하기 위해 꼭 필요한 절차이니 차근차근 진행해주세요.</p>\r\n");
      out.write("                <hr class=\"my-4\">\r\n");
      out.write("                <br>\r\n");
      out.write("        \r\n");
      out.write("                <p class=\"font-weight-bold\">펀딩 종료 및 결제 진행</p>\r\n");
      out.write("                <p>결제는 종료일+1영업일부터 최대 4영업일까지 진행됩니다.</p>\r\n");
      out.write("        \r\n");
      out.write("                <p class=\"font-weight-bold\">바로정산</p>\r\n");
      out.write("                <p>펀딩이 성공적으로 종료 후, 최종 결제 금액의 일부가 정산금으로 지급됩니다.</p>\r\n");
      out.write("                \r\n");
      out.write("                <p class=\"font-weight-bold\">리워드 발송</p>\r\n");
      out.write("                <p>메이커는 리워드 준비 및 발송을 진행하며 발송 후에는 발송 정보에 대한 발송 상태를 변경해야 합니다.</p>\r\n");
      out.write("        \r\n");
      out.write("                <p class=\"font-weight-bold\">펀딩금 반환</p>(신청한 서포터가 있는 경우에 한함)\r\n");
      out.write("                <p>펀딩한 서포터는 리워드 하자 및 배송 지연에 대한 펀딩금 반환을 신청할 수 있습니다.\r\n");
      out.write("\r\n");
      out.write("                    ※ 상세한 펀딩금 반환 정책은 펀딩금 반환 정책에서 확인하세요.</p>\r\n");
      out.write("                \r\n");
      out.write("                \r\n");
      out.write("                <p class=\"font-weight-bold\">최종정산</p>\r\n");
      out.write("                <p>리워드 발송과 펀딩금 반환이 모두 완료되면 최종정산이 진행됩니다.\r\n");
      out.write("\r\n");
      out.write("                    ※ 정산에 대한 자세한 내용은 와디즈 정산 정책을 확인하세요.</p>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                <p class=\"lead\">\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-secondary btn-lg \"> &lt; 이전 </button> \r\n");
      out.write("                    <a class=\"btn btn-primary btn-lg\" href=\"#\" role=\"button\" style=\"width: 200px;\"  onclick=\"location.href='");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/funding/fundingStart5';\">다음</a>\r\n");
      out.write("                </p>\r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("        \r\n");
      out.write("            </div>\r\n");
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </section>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
